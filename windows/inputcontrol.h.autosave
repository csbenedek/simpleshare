#ifndef TEXTINPUTWIDGET_H
#define TEXTINPUTWIDGET_H

#include <QLineEdit>
#include <QKeySequence>
#include <QString>
#include <QEvent>
#include <QKeyEvent>
#include <QTimer>

#define UI_CLEAR_BUTTON

class TextInputWidget : public QLineEdit
{
    Q_OBJECT

    Q_PROPERTY(QKeySequence keySequence READ keySequence WRITE setKeySequence)
    Q_PROPERTY(QString noneText READ noneText WRITE setNoneText)

public:
    explicit KeySequenceWidget(QWidget *parent = 0);
    explicit KeySequenceWidget(QKeySequence seq, QWidget *parent = 0);
    virtual ~KeySequenceWidget();

    QKeySequence keySequence() const;
    QString noneText() const;

protected:
    // Reimplemented for internal reasons.
    virtual bool event(QEvent *e);
    virtual void keyPressEvent(QKeyEvent *keyEvent);
    virtual void keyReleaseEvent(QKeyEvent *keyEvent);
    virtual void focusInEvent(QFocusEvent* event);
    virtual void focusOutEvent(QFocusEvent* event);
    virtual void mousePressEvent(QMouseEvent* mouseEvent);
    virtual void mouseMoveEvent(QMouseEvent* mouseEvent);
    virtual void paintEvent(QPaintEvent* event);

private:
    void init(const QKeySequence keySeq, const QString noneStr);

    void updateDisplayShortcut();

signals:
    void keySequenceStart();
    void keySequenceEnd();
    void keySequenceChanged(const QKeySequence &seq);
    void keySequenceAccepted(const QKeySequence &seq);
    void keySequenceCleared();
    void keyNotSupported();

public slots:
    void startRecording();
    void doneRecording();
    void cancelRecording();
    void setKeySequence(const QKeySequence &key);
    void clearKeySequence();
    void setNoneText(const QString text);
    void controlModifierlessTimeout();

    // members
private:
    QKeySequence    m_currentSequence;
    QKeySequence    m_oldSequence;
    QKeySequence    m_defaultKeySequence;
    QString         m_noneSequenceText;

    QTimer          m_modifierlessTimeout;

    quint32         m_numKey;
    quint32         m_modifierKeys;

    bool            m_isRecording;

#ifdef UI_CLEAR_BUTTON
    QPixmap         m_reloadIcon;
#endif

};

#endif // KEYSEQUENCEWIDGET_H
